#include <msp430.h>

volatile unsigned int i = 0; // Variable to measure press duration

int main(void) {
    WDTCTL = WDTPW | WDTHOLD;   // Stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5;       // Disable high-impedance mode to enable GPIOs

    P1DIR |= BIT0;              // Set P1.0 as output (LED)
    P1OUT &= ~BIT0;             // Ensure LED is off initially

    P1DIR &= ~BIT2;             // Set P1.2 as input (Button)
    P1REN |= BIT2;              // Enable pull-up/down resistor
    P1OUT |= BIT2;              // Set pull-up resistor

    P1IE  |= BIT2;              // Enable interrupt on P1.2
    P1IES |= BIT2;              // Falling edge trigger (button press)
    P1IFG &= ~BIT2;             // Clear interrupt flag

    __bis_SR_register(GIE);     // Enable global interrupts

    while (1) {
        if (!(P1IN & BIT2)) {   // If button is pressed
            i++;                // Increase counter
            __delay_cycles(100); // Small delay to avoid rapid counting
        } else {
            i = 0;              // Reset counter when button is released
        }
    }
}

// Interrupt Service Routine for P1 (Button)
#pragma vector = PORT1_VECTOR
__interrupt void PORT1_ISR(void) {
    if (i > 10000) {            // Long press detected
        P1OUT |= BIT0;          // Turn LED ON (long press effect)
    } else {                    // Short press detected
        P1OUT ^= BIT0;          // Toggle LED
    }

    P1IFG &= ~BIT2;             // Clear interrupt flag
}
