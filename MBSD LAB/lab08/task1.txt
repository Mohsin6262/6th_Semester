#include <msp430.h>

int main(void)
{
    WDTCTL   = WDT_ADLY_1000;                // WDT 1000 ms, ACLK, interval timer
    SFRIE1  |= WDTIE;                        // Enable WDT interrupt
    P4SEL0  |= BIT2 + BIT1;                  // P4.2: XOUT; P4.1: XIN
    CSCTL4   = SELMS__DCOCLKDIV + SELA__XT1CLK; // MCLK = SMCLK = DCO; ACLK = XT1CLK

    // Port configuration: set all unused pins to output low
    P1OUT = 0x00;
    P2OUT = 0x00;
    P3OUT = 0x00;
    P4OUT = 0x00;
    P5OUT = 0x00;
    P6OUT = 0x00;
    P7OUT = 0x00;
    P8OUT = 0x00;

    P1DIR = 0xFF;
    P2DIR = 0xFF;
    P3DIR = 0xFF;
    P4DIR = 0xFF;
    P5DIR = 0xFF;
    P6DIR = 0xFF;
    P7DIR = 0xFF;
    P8DIR = 0xFF;

    // Disable the GPIO power-on default high-impedance mode
    // to activate previously configured port settings
    PM5CTL0 &= ~LOCKLPM5;

    // Wait until XT1 and DCO fault flags are cleared
    do
    {
        CSCTL7 &= ~(XT1OFFG | DCOFFG); // Clear XT1 and DCO fault flags
        SFRIFG1 &= ~OFIFG;                // Clear oscillator fault flag
    }
    while (SFRIFG1 & OFIFG);

    __bis_SR_register(LPM3_bits | GIE);    // Enter LPM3 with interrupts enabled
    __no_operation();                      // For debugger
}

// Watchdog Timer interrupt service routine
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector = WDT_VECTOR
__interrupt void WDT_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(WDT_VECTOR))) WDT_ISR(void)
#else
#error Compiler not supported!
#endif
{
    P1OUT ^= 0x01;                         // Toggle P1.0 (LED) every 1 s
}
