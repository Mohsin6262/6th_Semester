#include <msp430.h>
#include <stdint.h>

// LCD digit segment definitions
#define pos1 4
#define pos2 6
#define pos3 8
#define pos4 10
#define pos5 2
#define pos6 18

const char digit[10] =
{
    0xFC,   // "0"
    0x60,   // "1"
    0xDB,   // "2"
    0xF3,   // "3"
    0x67,   // "4"
    0xB7,   // "5"
    0xBF,   // "6"
    0xE4,   // "7"
    0xFF,   // "8"
    0xF7    // "9"
};

// Keypad row and column pins
#define ROWS (BIT4 | BIT5 | BIT6 | BIT7)   // Rows: P1.4 to P1.7
#define COLS (BIT0 | BIT1 | BIT2 | BIT3)   // Columns: P5.0 to P5.3

// Function Prototypes
void setupLCD(void);
void setupKeypad(void);
unsigned char scanKeypad(void);
void displayNumber(unsigned char number);
void ButtonCallback_SW1(void);
void ButtonCallback_SW2(void);
void TimerCallback(void);

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;       // Stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5;           // Unlock GPIO

    setupLCD();
    setupKeypad();

    unsigned char key;
    while (1)
    {
        key = scanKeypad();         // Scan the keypad
        if (key != 0xFF)            // If key is pressed
        {
            displayNumber(key);     // Display number
        }
    }
}

void setupLCD(void)
{
    // XT1 Oscillator Setup
    P4SEL0 |= BIT1 | BIT2; // P4.1 & P4.2 for XT1
    do {
        CSCTL7 &= ~(XT1OFFG | DCOFFG);
        SFRIFG1 &= ~OFIFG;
    } while (SFRIFG1 & OFIFG);
    CSCTL6 = (CSCTL6 & ~(XT1DRIVE_3)) | XT1DRIVE_2;

    PM5CTL0 &= ~LOCKLPM5;

    // LCD Configuration
    SYSCFG2 |= LCDPCTL;
    LCDPCTL0 = 0xFFFF;
    LCDPCTL1 = 0x07FF;
    LCDPCTL2 = 0x00F0;

    LCDCTL0 = LCDSSEL_0 | LCDDIV_7;
    LCDVCTL = LCDCPEN | LCDREFEN | VLCD_6 | (LCDCPFSEL0 | LCDCPFSEL1 | LCDCPFSEL2 | LCDCPFSEL3);

    LCDMEMCTL |= LCDCLRM;
    LCDCSSEL0 = 0x000F; // COMs: L0-L3
    LCDCSSEL1 = 0x0000;
    LCDCSSEL2 = 0x0000;

    LCDM0 = 0x21;
    LCDM1 = 0x84;

    LCDMEM[pos1] = digit[1];
//    LCDMEM[pos2] = digit[2];
//    LCDMEM[pos3] = digit[3];
//    LCDMEM[pos4] = digit[4];
//    LCDMEM[pos5] = digit[5];
//    LCDMEM[pos6] = digit[6];

    LCDCTL0 |= LCD4MUX | LCDON;
}

void setupKeypad(void)
{
    P1DIR |= ROWS;      // Rows output
    P1OUT &= ~ROWS;     // Drive low

    P5DIR &= ~COLS;     // Columns input
    P5REN |= COLS;      // Enable pull-up/down
    P5OUT |= COLS;      // Set pull-ups
}

unsigned char scanKeypad(void)
{
    unsigned char row, col;
    unsigned char keyMap[4][4] = {
        {1, 2, 3, 'A'},
        {4, 5, 6, 'B'},
        {7, 8, 9, 'C'},
        {0xFF, 0, 0xFF, 0xFF}
    };

    for (row = 0; row < 4; row++)
    {
        P1OUT = ~(BIT4 << row);    // Drive one row low

        for (col = 0; col < 4; col++)
        {
            if (!(P5IN & (BIT0 << col))) // Check for key press
            {
                return keyMap[row][col];
            }
        }
    }
    return 0xFF; // No key pressed
}

void displayNumber(unsigned char number)
{
    if (number < 10)
    {
        LCDMEM[pos1] = digit[number];
    }
}

void ButtonCallback_SW1(void) {}
void ButtonCallback_SW2(void) {}
void TimerCallback(void) {}

